// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // Decode
    // Mux 1
    Not(in=instruction[15], out=ainstr);
    // Only store into A if this is an A instruction or if the dest bit for A is true
    Mux16(a=aluout, b=instruction, sel=ainstr, out=ain);
    Or(a=ainstr, b=instruction[5], out=loada);
    ARegister(in=ain, load=loada, out=aout, out[0..14]=addressM);

    // Mux 2
    And(a=instruction[15], b=instruction[12], out=sely);
    Mux16(a=aout, b=inM, sel=sely, out=y);

    And(a=instruction[15], b=instruction[4], out=loadd);
    DRegister(in=aluout, load=loadd, out=x);

    And(a=instruction[15], b=instruction[11], out=zx);
    And(a=instruction[15], b=instruction[10], out=nx);
    And(a=instruction[15], b=instruction[9], out=zy);
    And(a=instruction[15], b=instruction[8], out=ny);
    And(a=instruction[15], b=instruction[7], out=f);
    And(a=instruction[15], b=instruction[6], out=no);
    ALU(x=x, y=y, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=aluout, out=outM, zr=zr ,ng=ng);
    And(a=instruction[15], b=instruction[2], out=v1);
    And(a=instruction[15], b=instruction[1], out=v2);
    And(a=instruction[15], b=instruction[0], out=v3);
    And(a=ng, b=v1, out=j1);
    And(a=zr, b=v2, out=j2);
    // output > 0 = !zr && !ng = !(zr || ng)
    Or(a=ng, b=zr, out=n1);
    Not(in=n1, out=n2);
    And(a=n2, b=v3, out=j3);

    // load if (j1 || j2 || j3)
    Or(a=j1, b=j2, out=j4);
    Or(a=j3, b=j4, out=load);
    // inc if (!load)
    Not(in=load, out=inc);

    PC(in=aout, load=load, inc=inc, reset=reset, out[0..14]=pc);
    And(a=instruction[15], b=instruction[3], out=writeM);
}