// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = twoToThe[0] + twoToThe[0];
        let twoToThe[2] = twoToThe[1] + twoToThe[1];
        let twoToThe[3] = twoToThe[2] + twoToThe[2];
        let twoToThe[4] = twoToThe[3] + twoToThe[3];
        let twoToThe[5] = twoToThe[4] + twoToThe[4];
        let twoToThe[6] = twoToThe[5] + twoToThe[5];
        let twoToThe[7] = twoToThe[6] + twoToThe[6];
        let twoToThe[8] = twoToThe[7] + twoToThe[7];
        let twoToThe[9] = twoToThe[8] + twoToThe[8];
        let twoToThe[10] = twoToThe[9] + twoToThe[9];
        let twoToThe[11] = twoToThe[10] + twoToThe[10];
        let twoToThe[12] = twoToThe[11] + twoToThe[11];
        let twoToThe[13] = twoToThe[12] + twoToThe[12];
        let twoToThe[14] = twoToThe[13] + twoToThe[13];
        let twoToThe[15] = twoToThe[14] + twoToThe[14];
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return x * -1;
        }
        return x;
    }

    function boolean bit(int x, int i) {
        return (twoToThe[i] & x) = twoToThe[i];
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i, w;
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        let w = 16;
        while (i < w) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, a, b, multiplier;
        let a = Math.abs(x);
        let b = Math.abs(y);
        let multiplier = 1;
        if (x < 0 & y > 0) {
            let multiplier = -1;
        }
        if (x > 0 & y < 0) {
            let multiplier = -1;
        }
        if (b > a | b < 0) {
            return 0;
        }
        let q = Math.divide(a, b + b);
        if ((a - (2 * (q * b))) < b) {
            return (q + q) * multiplier;
        } else {
            return (q + q + 1) * multiplier;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, n, j, z;
        let y = 0;
        let n = 16;
        let j = n / 2 - 1;
        while (j > -1) {
            let z = (y + twoToThe[j]) * (y + twoToThe[j]);
            if (~(z > x) & (z > 0)) {
                let y = y + twoToThe[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b) {
            return b;
        } else {
            return a;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
