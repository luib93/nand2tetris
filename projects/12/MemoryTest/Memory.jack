// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = heap;
        let freeList[0] = 0;
        let freeList[1] = 14334;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array block;
        let block = freeList;
        // Iterate through the heap for a segment with size >= size + 2
        while ((block[1] < size + 2) & (block[0] > 0)) {
            let block = block[0];
        }
        if (block[1] < (size + 2)) {
            return Sys.error(6);
        }

        // Break off a new segment from the found segment
        // Update the found segment's size
        let block[1] = block[1] - size - 2;

        // Update the new segment's next and size
        let block[2 + block[1]] = 0;
        let block[3 + block[1]] = size;

        // Return the address of the new segment's data block
        return block + 4 + block[1];
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array block;
        let block = freeList;
        // Go to the last free segment
        while (block[0] > 0) {
            let block = block[0];
        }
        let block[0] = o - 2;
        return;
    }    
}
