// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array start;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        let start = 16384;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = twoToThe[0] + twoToThe[0];
        let twoToThe[2] = twoToThe[1] + twoToThe[1];
        let twoToThe[3] = twoToThe[2] + twoToThe[2];
        let twoToThe[4] = twoToThe[3] + twoToThe[3];
        let twoToThe[5] = twoToThe[4] + twoToThe[4];
        let twoToThe[6] = twoToThe[5] + twoToThe[5];
        let twoToThe[7] = twoToThe[6] + twoToThe[6];
        let twoToThe[8] = twoToThe[7] + twoToThe[7];
        let twoToThe[9] = twoToThe[8] + twoToThe[8];
        let twoToThe[10] = twoToThe[9] + twoToThe[9];
        let twoToThe[11] = twoToThe[10] + twoToThe[10];
        let twoToThe[12] = twoToThe[11] + twoToThe[11];
        let twoToThe[13] = twoToThe[12] + twoToThe[12];
        let twoToThe[14] = twoToThe[13] + twoToThe[13];
        let twoToThe[15] = twoToThe[14] + twoToThe[14];
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int currX, currY, address;
        let currX = 0;
        let currY = 0;
        // 16 word size  => 16 registers rows (16 * 16 = 256) and 32 registers cols (16 * 32 = 512)
        while (currY < 32) {
            let currX = 0;
            while (currX < 16) {
                let address = (32 * currY) + (16 * currX);
                do Memory.poke(start + address, 0);
                let currX = currX + 1;
            }
            let currY = currY + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, mod;
        let address = (32 * y) + (x / 16);
        let value = Memory.peek(start + address);
        let mod = twoToThe[x - ((x / 16) * 16)];
        if (color) {
            let value = value | mod;
        } else {
            let mod = ~mod;
            let value = value & mod;
        }
        do Memory.poke(start + address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff, isNeg, temp;

        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let diff = 0;

        if (x1 = x2) {
            do Screen.drawVerticalLine(y1, y2, x1);
            return;
        }
        if (y1 = y2) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }

        while ((Math.abs(a) < (Math.abs(dx) + 1)) & (Math.abs(b) < (Math.abs(dy) + 1))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            // (b/a > dy/dx) == (a*dy < b*dx)
            if (dy < 0) {
                if (diff < 0) {
                    let b = b - 1;
                    let diff = diff + dx;
                } else {
                    let a = a + 1;
                    let diff = diff + dy;
                }
            } else {
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int curr, max;
        let max = Math.max(x1, x2);
        let curr = Math.min(x1, x2);
        while (curr < (max + 1)) {
            do Screen.drawPixel(curr, y);
            let curr = curr + 1;
        }
        return;
    }

    function void drawVerticalLine(int y1, int y2, int x) {
        var int curr, max;
        let max = Math.max(y1, y2);
        let curr = Math.min(y1, y2);
        while (curr < (max + 1)) {
            do Screen.drawPixel(x, curr);
            let curr = curr + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int curr;
        let curr = y1;
        while (curr < (y2 + 1)) {
            do Screen.drawLine(x1, curr, x2, curr);
            let curr = curr + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        let dy = -r;
        while (dy < (r + 1)) {
            do Screen.drawLine(x - Math.sqrt((r * r) - (dy * dy)), y + dy, x + Math.sqrt((r * r) - (dy * dy)), y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
